package com.xbb.thread;

/*
 * 银行家算法是一种预分配算法，
 * 银行家类似操作系统，线程所需的资源就好比银行里的钱，线程申请资源好比是从银行里贷款。
 * 当进程首次申请资源时，操作系统会测试进程所需的最大资源，若超过系统现有资源的总和，则推迟分配，否者正常分配。
 * 当进程运行中再次申请资源时，操作系统会测试这次资源的申请量+进程已占有的资源量是否超过进程的最大需求量，如超过则拒绝分配。
 * 若没超过，再比较本次申请的资源与系统目前的资源总量，若超过，则推迟分配，否者正常分配。
 *  
 * 银行家算法有一个很大的问题就是，需要预先知道程序所需的所有资源
 * 
 * 其他解决死锁的方法：比如一次性分配等（但是会降低并发性，降低效率）
 * 
 * @author 徐兵
 */


public class ProblemBanker {
	
	//这个算法没写！
	//主要原因：算法思想本身的编程实现，使用模拟资源，线程调度内容无关，所以没写！
	//次要原因：我懒~
	//哈哈，你来完成，怎么样？
}
